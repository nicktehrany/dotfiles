#!/bin/bash
set -e

# The screen layout is hardcoded for my usual setup (it will manage different hdmi or thunderbolt ports), however will require changes for any
# other setup (only on the screen layout and workspaces)
# I keep workspaces 1-5 on my external monitor and 6-10 on laptop, when merging I just move 1-5 to the same workspaces (same number) on the laptop
# When plugging a 2nd monitor in while already having 8 workspaces on the main, it will take a couple of seconds for the monitor to be fully
# conected (hence the sleep on line 24) after which the workspaces on each monitor will correct (since it's run async the topbar will refresh then)
if [[ "$(xrandr -q | grep -w "connected" | wc -l)" -eq "1" ]]; then 
    MAIN_SCREEN=$(xrandr --verbose | grep -Fw 'connected' | cut -d ' ' -f 1) 
    xrandr --output $MAIN_SCREEN --primary --mode 1920x1080
    NR_ACTIVE_SCREENS=$(bspc query -M | wc -l)
    if [[ "$NR_ACTIVE_SCREENS" -eq "1" ]]; then
        # First init so put all in one
        bspc monitor $MAIN_SCREEN -d 1 2 3 4 5 6 7 8 9 10
    elif [[ "$NR_ACTIVE_SCREENS" -eq "2" ]]; then
        OLD_SCREEN=$(bspc query -M --names | grep -v $MAIN_SCREEN)
        xrandr --output $OLD_SCREEN --off
        sleep 3
        bspc monitor $MAIN_SCREEN --reorder-desktops 1 2 3 4 5 6 7 8 9 10
        bspc monitor $OLD_SCREEN -r
    fi 
elif [[ "$(bspc query -D | wc -l)" -ne "10" ]]; then # No desktops there yet
    bspc monitor ${SCREENS[1]} -d 1 2 3 4 5
    bspc monitor ${SCREENS[0]} -d 6 7 8 9 10
else
    SCREENS=($(xrandr --verbose | grep -Fw 'connected' | cut -d ' ' -f 1))
    xrandr --output ${SCREENS[1]} --primary --mode 1920x1080 --rotate normal --output ${SCREENS[0]} --mode 1920x1080 --rotate normal --right-of ${SCREENS[1]}
    sleep 3
    for ((i=1;i<=5;i++)); do
        bspc desktop $i -m ${SCREENS[1]}
    done
    bspc wm -O ${SCREENS[1]} ${SCREENS[0]}
fi

if [[ "$(bspc query -D --names | grep Desktop | wc -l)" -ne "0" ]]; then 
    bspc desktop Desktop -r
fi
